@use 'sass:math';
@use 'sass:map';

$input: () !default;
$input: map.merge(
                (
                        'text-color': getCssVar('text-color-regular'),
                        'hover-border': getCssVar('border-color-hover'),
                        'focus-border': getCssVar('color-primary'),
                        'transparent-border': 0 0 0 1px transparent inset,
                        'border-color': getCssVar('border-color'),
                        'background-color': getCssVar('fill-color', 'blank'),
                        'icon-color': getCssVar('text-color-placeholder'),
                        'placeholder-color': getCssVar('text-color-placeholder'),
                        'hover-border-color': getCssVar('border-color-hover'),
                        'clear-hover-color': getCssVar('text-color-secondary'),
                        'focus-border-color': getCssVar('color-primary'),
                        'width': 100%,
                ),
                $input
);

$input-disabled: () !default;
$input-disabled: map.merge(
                (
                        'fill': getCssVar('disabled-background-color'),
                        'border': getCssVar('disabled-border-color'),
                        'text-color': getCssVar('disabled-text-color'),
                        'placeholder-color': getCssVar('text-color-placeholder'),
                ),
                $input-disabled
);

@mixin inset-prepend-border($color) {
  box-shadow: 1px 0 0 0 $color inset, 0 1px 0 0 $color inset,
  0 -1px 0 0 $color inset;
}

@mixin inset-append-border($color) {
  box-shadow: 0 1px 0 0 $color inset, 0 -1px 0 0 $color inset,
  -1px 0 0 0 $color inset;
}

@mixin inset-prepend-input-border($color) {
  box-shadow: 1px 0 0 0 $color inset, 1px 0 0 0 $color, 0 1px 0 0 $color inset,
  0 -1px 0 0 $color inset !important;
}

@mixin inset-append-input-border($color) {
  box-shadow: -1px 0 0 0 $color, -1px 0 0 0 $color inset, 0 1px 0 0 $color inset,
  0 -1px 0 0 $color inset !important;
}

@mixin mixed-input-border($color) {
  box-shadow: 0 0 0 1px $color inset;
}


@mixin inset-input-border($color, $important: false) {
  @if $important == true {
    box-shadow: 0 0 0 1px $color inset !important;
  }
  @else {
    box-shadow: 0 0 0 1px $color inset;
  }
}


@include b(input) {
  @include set-component-css-var('input', $input);
  display: inline-flex;
  position: relative;
  align-items: stretch;
  vertical-align: middle;

  @include when(block) {
    width: 100%;
    display: flex;
  }

  @include when(disabled) {
    .#{$namespace}-input-input {
      cursor: not-allowed;
      background-color: map.get($input-disabled, 'fill');
      @include mixed-input-border(map.get($input-disabled, 'border'));

      color: map.get($input-disabled, 'text-color');
      -webkit-text-fill-color: map.get($input-disabled, 'text-color');
      cursor: not-allowed;

      &::placeholder {
        color: map.get($input-disabled, 'placeholder-color');
      }
    }
  }

  @include when(line) {
    .#{$namespace}-input-input {
      border-top-color: transparent !important;
      border-left-color: transparent !important;
      border-right-color: transparent !important;
    }
  }

  @include e(label) {
    padding: 0 $text-padding;
    line-height: $component-size;
    background-color: $background-color-component;
    border-top-left-radius: getCssVar('border-radius-base');
    border-bottom-left-radius: getCssVar('border-radius-base');
    user-select: none;
    white-space: nowrap;

    &+ {
      .#{$namespace}-input-input {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }

  textarea.#{$namespace}-input-input {
    padding: $content-padding;
    height: auto;
    overflow-y: auto;
    resize: vertical;
  }

  @include e(input) {
    position: relative;
    display: block;
    resize: vertical;
    line-height: $line-height-base;
    box-sizing: border-box;
    width: 100%;
    font-size: inherit;
    font-family: inherit;
    color: var(#{getCssVarName('input-text-color')}, map.get($input, 'text-color'));
    background-color: var(#{getCssVarName('input-background-color')}, map.get($input, 'background-color'));
    background-image: none;
    -webkit-appearance: none;
    @include inset-input-border(var(#{getCssVarName('input-border-color')}, map.get($input, 'border-color')));
    border-radius: getCssVar('border-radius-base');
    transition: $transition-time;
    outline: none;
    border: none;
    padding: 0 $content-padding;

    &::placeholder {
      color: getCssVarWithDefault('input-placeholder-color', map.get($input, 'placeholder-color'));
    }

    // override edge default style
    &[type='password']::-ms-reveal {
      display: none;
    }

    &[type='number'] {
      line-height: 1;
    }

    &:hover {
      @include inset-input-border(#{getCssVar('input', 'hover-border-color')});
    }

    &:focus {
      @include inset-input-border(#{getCssVar('input', 'focus-border-color')});
    }
  }

  @include when(loading) {
    .c-input-input {
      padding-right: $component-size;
    }

    &::after {
      border-color: transparent;
      animation: loading .6s linear;
      animation-iteration-count: infinite;
    }
  }

  @include when(prefix) {
    input {
      padding-left: $font-size + $content-padding + $text-padding;
    }
  }

  @include when(suffix) {
    input {
      padding-right: $font-size + $content-padding + $text-padding;
    }
  }

  .#{$namespace}-input-fix {
    position: absolute;
    top: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    height: $component-size;
    line-height: $component-size;
    text-align: center;
    color: $text-color-placeholder;
    transform: translateY(-50%);
    z-index: 1;

    &-inner {
      pointer-events: all;
    }

    &.#{$namespace}-input-prefix {
      left: 0;
      padding-left: $content-padding;
    }

    &.#{$namespace}-input-suffix {
      right: 0;
      padding-right: $content-padding;
    }
  }

  &.#{$namespace}-input-textarea {
    .#{$namespace}-input-fix {
      top: initial;
      bottom: 0;
      transform: translateY(0);
    }
  }

  @include e(clear) {
    font-size: $font-size-large;
    cursor: pointer;
  }

  @include e(count) {
    padding: 0 $text-padding;
    font-size: $font-size-small;
    color: $text-color-secondary;
    user-select: none;
  }

  @each $sizeName, $size in $sizes {
    @include when($sizeName) {
      @include e(input) {
        font-size: map-get($size, 'fontSize');

        &:not(textarea) {
          height: map-get($size, 'size');
          line-height: map-get($size, 'size') - 2 * $border-width;
        }
      }

      @include when(circle) {
        @include e(input) {
          border-radius: map-get($size, 'size') / 2;
        }

        @include e(pend) {
          border-radius: map-get($size, 'size') / 2;
        }
      }

      @include when(round) {
        @include e(input) {
          border-radius: map-get($size, 'size') / 2;
        }

        @include e(pend) {
          border-radius: map-get($size, 'size') / 2;
        }
      }
    }
  }

  @include e(pend) {
    background-color: getCssVar('fill-color', 'light');
    color: var(#{getCssVarName('input-text-color')}, map.get($input, 'text-color'));
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-height: 100%;
    border-radius: getCssVar('border-radius-base');
    padding: 0 $content-padding;
    white-space: nowrap;

    .#{$namespace}-select,
    .#{$namespace}-button {
      display: inline-flex;
      margin: 0 -$content-padding;
    }

    .#{$namespace}-select {
      .#{$namespace}-input-input {
        border-color: transparent;
        background-color: transparent;
        color: inherit;
      }
    }

    button.#{$namespace}-button,
    button.#{$namespace}-button:hover {
      border-color: transparent;
      background-color: transparent;
      color: inherit;
    }
  }

  @include e(prepend) {
    border-right: 0;
    border-top-right-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    @include inset-prepend-border(#{getCssVar('input-border-color')});
  }

  @include e(append) {
    border-left: 0;
    border-top-left-radius: 0 !important;
    border-bottom-left-radius: 0 !important;
    @include inset-append-border(#{getCssVar('input-border-color')});
  }

  @include when(prepend) {
    > .#{$namespace}-input-input {
      border-top-left-radius: 0 !important;
      border-bottom-left-radius: 0 !important;
    }

    @include e(prepend) {
      .#{$namespace}-select {
        .#{$namespace}-input-input {
          border-top-right-radius: 0 !important;
          border-bottom-right-radius: 0 !important;
          @include inset-prepend-border(#{getCssVar('input-border-color')});
        }
      }
    }
  }

  @include when(append) {
    > .#{$namespace}-input-input {
      border-top-right-radius: 0 !important;
      border-bottom-right-radius: 0 !important;
    }

    @include e(append) {
      .#{$namespace}-select {
        .#{$namespace}-input-input {
          border-top-left-radius: 0 !important;
          border-bottom-left-radius: 0 !important;
          @include inset-append-border(#{getCssVar('input-border-color')});
        }
      }
    }
  }
}
